import sqlite3
import threading
from sys import platform

import telebot
from datetime import datetime, timedelta
import time
import pytz

TOKEN = ''
ADMIN_ID = ''
bot = telebot.TeleBot(TOKEN)

moscow_tz = pytz.timezone('Europe/Moscow')

DB_PATH = ""

if platform == "linux" or platform == "linux2":
    DB_PATH = "/root/reminds-app/reminders.db"
elif platform == "win32":
    DB_PATH = "reminders.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        chat_id INTEGER NOT NULL
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS reminders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        message TEXT NOT NULL,
        reminder_date TEXT,
        reminder_time TEXT NOT NULL,
        repeat BOOLEAN NOT NULL DEFAULT 0,
        days_of_week TEXT DEFAULT NULL,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )
    ''')

    conn.commit()
    conn.close()

init_db()


def make_text_cute(text):
    return f'üå∏ {text} üå∏'


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE chat_id = ?', (chat_id,))
    user_exists = cursor.fetchone()

    if not user_exists:
        cursor.execute('INSERT INTO users (chat_id) VALUES (?)', (chat_id,))
        conn.commit()
        conn.close()
        bot.reply_to(message,
                     '–ü—Ä–∏–≤–µ—Ç–∏–∫, –º–æ—ë –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–æ–ª–Ω—ã—à–∫–æ! ‚òÄÔ∏è –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –≤–µ—â–∏ ^^!\n'
                     '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n'
                     '/start -- —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞!\n'
                     '/–Ω–∞–ø–æ–º–Ω–∏ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú —Å–æ–æ–±—â–µ–Ω–∏–µ -- –¥–ª—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n'
                     '/–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ß–ß:–ú–ú —Å–æ–æ–±—â–µ–Ω–∏–µ -- –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n'
                     '/–Ω–µ–¥–µ–ª—è –ü–ù,–í–¢,–°–† –ß–ß:–ú–ú —Å–æ–æ–±—â–µ–Ω–∏–µ -- –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏\n'
                     '/—Å–ø–∏—Å–æ–∫ -- –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–≤–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n'
                     '/—É–¥–∞–ª–∏ –∏–¥ -- –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n'
                     '–ï—Ç–æ –≤—Å—ë ( ‚ìõ Ôªå ‚ìõ *)')
    else:
        conn.close()
        bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç–∏–∫ —Å–Ω–æ–≤–∞~ –Ø —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏.\n'
                              '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n'
                                 '/start -- —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞!\n'
                                 '/–Ω–∞–ø–æ–º–Ω–∏ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú —Å–æ–æ–±—â–µ–Ω–∏–µ -- –¥–ª—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n'
                                 '/–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ß–ß:–ú–ú —Å–æ–æ–±—â–µ–Ω–∏–µ -- –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n'
                                '/–Ω–µ–¥–µ–ª—è –ü–ù,–í–¢,–°–† –ß–ß:–ú–ú —Å–æ–æ–±—â–µ–Ω–∏–µ -- –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏\n'
                                 '/—Å–ø–∏—Å–æ–∫ -- –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–≤–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n'
                                 '/—É–¥–∞–ª–∏ –∏–¥ -- –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n'
                                 '–ï—Ç–æ –≤—Å—ë ( ‚ìõ Ôªå ‚ìõ *)')




@bot.message_handler(commands=['–Ω–∞–ø–æ–º–Ω–∏'])
def set_reminder(message):
    chat_id = message.chat.id
    try:
        date_str, time_str, *reminder_text = message.text.split()[1:]
        message_text = ' '.join(reminder_text)
        reminder_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        reminder_time = datetime.strptime(time_str, '%H:%M').time()
        reminder_datetime = moscow_tz.localize(datetime.combine(reminder_date, reminder_time))

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM users WHERE chat_id = ?', (chat_id,))
        user_id = cursor.fetchone()[0]

        cursor.execute('''
        INSERT INTO reminders (user_id, message, reminder_date, reminder_time, repeat)
        VALUES (?, ?, ?, ?, 0)
        ''', (user_id, message_text, reminder_datetime.strftime('%Y-%m-%d'), reminder_datetime.strftime('%H:%M')))
        conn.commit()
        conn.close()

        bot.reply_to(message, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {date_str} –≤ {time_str} (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è). –ù–µ –∑–∞–±—É–¥—å! ‡¨ò(‡©≠‚óâœâ‚óâ)„Å§„Éº‚òÜ')
    except (IndexError, ValueError):
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–Ω–∞–ø–æ–º–Ω–∏ YYYY-MM-DD HH:MM —Å–æ–æ–±—â–µ–Ω–∏–µ (‚âß‚àá‚â¶)')

@bot.message_handler(commands=['–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ'])
def set_daily_reminder(message):
    chat_id = message.chat.id
    try:
        time_str, *reminder_text = message.text.split()[1:]
        message_text = ' '.join(reminder_text)
        reminder_time = datetime.strptime(time_str, '%H:%M').time()
        reminder_datetime = moscow_tz.localize(datetime.combine(datetime.now().date(), reminder_time))

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM users WHERE chat_id = ?', (chat_id,))
        user_id = cursor.fetchone()[0]

        cursor.execute('''
        INSERT INTO reminders (user_id, message, reminder_date, reminder_time, repeat)
        VALUES (?, ?, NULL, ?, 1)
        ''', (user_id, message_text, reminder_datetime.strftime('%H:%M')))
        conn.commit()
        conn.close()

        bot.reply_to(message, f'–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str} (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è). –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å! /·ê†‚âΩ¬∑„ÉÆ¬∑‚âº„Éû')
    except (IndexError, ValueError):
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ HH:MM —Å–æ–æ–±—â–µ–Ω–∏–µ ‡´Æ‚Çç À∂·µî ·µï ·µîÀ∂ ‚Çé·Éê')

@bot.message_handler(commands=['–Ω–µ–¥–µ–ª—è'])
def set_weekly_reminder(message):
    chat_id = message.chat.id
    try:
        days_str, time_str, *reminder_text = message.text.split()[1:]
        message_text = ' '.join(reminder_text)
        reminder_time = datetime.strptime(time_str, '%H:%M').time()
        reminder_datetime = moscow_tz.localize(datetime.combine(datetime.now().date(), reminder_time))
        days_of_week = days_str.split(',')

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM users WHERE chat_id = ?', (chat_id,))
        user_id = cursor.fetchone()[0]

        cursor.execute('''
        INSERT INTO reminders (user_id, message, reminder_date, reminder_time, repeat, days_of_week)
        VALUES (?, ?, NULL, ?, 1, ?)
        ''', (user_id, message_text, reminder_datetime.strftime('%H:%M'), ','.join(days_of_week)))
        conn.commit()
        conn.close()

        bot.reply_to(message, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {", ".join(days_of_week)} –≤ {time_str} (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è). –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤ —ç—Ç–∏ –¥–Ω–∏! /·ê†‚âΩ¬∑„ÉÆ¬∑‚âº„Éû')
    except (IndexError, ValueError):
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–Ω–µ–¥–µ–ª—è –ü–ù,–í–¢,–°–† HH:MM —Å–æ–æ–±—â–µ–Ω–∏–µ ‡´Æ‚Çç À∂·µî ·µï ·µîÀ∂ ‚Çé·Éê')

@bot.message_handler(commands=['—Å–ø–∏—Å–æ–∫'])
def list_reminders(message):
    chat_id = message.chat.id
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE chat_id = ?', (chat_id,))
    user_id = cursor.fetchone()[0]

    cursor.execute('''
    SELECT id, message, reminder_date, reminder_time, repeat, days_of_week
    FROM reminders 
    WHERE user_id = ?
    ORDER BY reminder_date, reminder_time
    ''', (user_id,))
    reminders = cursor.fetchall()
    conn.close()

    if reminders:
        reminder_list = '\n'.join(
            [f'{row[0]}: {row[1]} –≤ {row[3]} –Ω–∞ {row[2] if row[2] else ("–∫–∞–∂–¥—ã–π –¥–µ–Ω—å" if row[4] else row[5])}' for row in reminders])
        bot.reply_to(message, f'–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{reminder_list} („Å•‡πë‚Ä¢·¥ó‚Ä¢‡πë)„Å•‚ô°')
    else:
        bot.reply_to(message, '–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. (·µï‚Äî·¥ó‚Äî)')

@bot.message_handler(commands=['—É–¥–∞–ª–∏'])
def delete_reminder(message):
    chat_id = message.chat.id
    try:
        reminder_id = int(message.text.split()[1])
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM users WHERE chat_id = ?', (chat_id,))
        user_id = cursor.fetchone()[0]

        cursor.execute('DELETE FROM reminders WHERE id = ? AND user_id = ?', (reminder_id, user_id))
        if cursor.rowcount > 0:
            bot.reply_to(message, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ. ‡´Æ Àô‚∞ôÀô ·Éê rawr!')
        else:
            bot.reply_to(message, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. ‡¨ò(Àµ‚ïπ-‚ïπ)‚îÅ‚òÜ')

        conn.commit()
        conn.close()
    except (IndexError, ValueError):
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—É–¥–∞–ª–∏ id_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')

@bot.message_handler(commands=['time'])
def admin_list_users(message):
    bot.reply_to(message, datetime.now().strftime("%H:%M:%S"))

@bot.message_handler(commands=['admin_l'])
def admin_list_users(message):
    if str(message.chat.id) == ADMIN_ID:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT chat_id FROM users')
        users = cursor.fetchall()
        conn.close()

        user_list = '\n'.join([str(user[0]) for user in users])
        bot.reply_to(message, f'–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}')
    else:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')

@bot.message_handler(commands=['admin_r'])
def admin_list_reminders(message):
    if str(message.chat.id) == ADMIN_ID:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
        SELECT users.chat_id, reminders.id, reminders.message, reminders.reminder_date, reminders.reminder_time, reminders.repeat, reminders.days_of_week
        FROM reminders 
        JOIN users ON reminders.user_id = users.id 
        ORDER BY reminders.user_id, reminders.reminder_date, reminders.reminder_time
        ''')
        reminders = cursor.fetchall()
        conn.close()

        if reminders:
            reminder_list = '\n'.join(
                [f'User {row[0]}: {row[1]}: {row[2]} –≤ {row[4]} –Ω–∞ {row[3] if row[3] else ("–∫–∞–∂–¥—ã–π –¥–µ–Ω—å" if row[5] else row[6])}' for row in reminders])
            bot.reply_to(message, f'–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{reminder_list}')
        else:
            bot.reply_to(message, '–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
    else:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
def check_reminders():
    while True:
        now = datetime.now(moscow_tz)
        current_time = now.time().strftime('%H:%M')
        current_date = now.date().strftime('%Y-%m-%d')
        current_day_of_week = now.strftime('%a')

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
        SELECT users.chat_id, reminders.message, reminders.repeat, reminders.days_of_week 
        FROM reminders 
        JOIN users ON reminders.user_id = users.id 
        WHERE (reminder_date = ? OR repeat = 1 OR days_of_week LIKE ?) AND reminder_time = ?
        ''', (current_date, f'%{current_day_of_week}%', current_time))
        reminders = cursor.fetchall()

        for chat_id, message, repeat, days_of_week in reminders:
            bot.send_message(chat_id=chat_id, text=message)
            if not repeat and not days_of_week:
                cursor.execute(
                    'DELETE FROM reminders WHERE reminder_date = ? AND reminder_time = ? AND user_id = (SELECT id FROM users WHERE chat_id = ?)',
                    (current_date, current_time, chat_id))

        conn.commit()
        conn.close()

        now = datetime.now(moscow_tz)
        next_minute = (now + timedelta(minutes=1)).replace(second=0, microsecond=0)
        time_to_sleep = (next_minute - now).total_seconds()
        time.sleep(time_to_sleep)


if __name__ == '__main__':
    check_reminders_thread = threading.Thread(target=check_reminders)
    check_reminders_thread.start()
    bot.infinity_polling()
